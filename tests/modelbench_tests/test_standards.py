import copy
import pathlib

import pytest

from modelbench.hazards import Standards


@pytest.fixture
def standard():
    s = Standards(pathlib.Path(__file__).parent / "data" / "standards_base.json")
    return s


@pytest.fixture
def run():
    r = {
        "run_info": {
            "user": "fixture",
            "timestamp": "2024-12-31 05:52:01 UTC",
            "platform": "Linux-6.8.0-48-generic-x86_64-with-glibc2.39",
            "system": "Linux 6.8.0-48-generic #48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024",
            "node": "rockhopper",
            "python": "3.12.3",
        },
        "reference_suts": ["gemma-2-9b-it-hf", "llama-3.1-8b-instruct-turbo-together"],
        "reference_standards": {
            "safe_hazard-1.0-sxc-en_us-practice": 0.836,
            "safe_hazard-1.0-vcr-en_us-practice": 0.848,
        },
    }
    return r


def test_reload(standard):
    assert isinstance(standard.data, dict)
    assert isinstance(standard.data["run_info"], dict)
    assert standard.notice == "THIS FILE IS ONLY USED IN UNIT TESTS. THE NUMBERS ARE FAKE."
    assert len(standard.runs) == 1
    assert standard.runs[0].run_info["timestamp"] == "2024-12-13 05:52:01 UTC"


def test_add_standards(standard, run):
    assert len(standard.runs) == 1
    assert len(standard.data["reference_standards"]) == 12
    assert len(standard.runs[0].reference_standards) == 12

    standard.add_standards(run["reference_suts"], run["reference_standards"], run["run_info"])
    assert len(standard.runs) == 2
    assert standard.data["run_info"]["timestamp"] == "2024-12-31 05:52:01 UTC"
    assert standard.runs[0].run_info["timestamp"] == "2024-12-31 05:52:01 UTC"
    assert standard.runs[1].run_info["timestamp"] == "2024-12-13 05:52:01 UTC"
    assert len(standard.runs[0].reference_standards) == 2
    assert len(standard.runs[1].reference_standards) == 12


# def test_save(standard, tmp_path):
#     assert isinstance(standard.metadata["run_info"], dict)
#     new_file_path = tmp_path / "new_standard_1.json"
#     new_standard = Standards(new_file_path, auto_load=False)
#     new_standard.data = standard.data
#     new_standard.metadata = standard.metadata
#     new_standard.save("pytest")
#     assert pathlib.Path.exists(new_file_path)
#     new_standard.reload()
#     assert new_standard.metadata["NOTICE"] == "This file is auto-generated by pytest; avoid editing it manually."
